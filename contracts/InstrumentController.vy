# @title Instrument Controller
# 
# @notice Controls specification, creation, and management of financial instruments and vehicles.
# 
# @author Alexander Angel
# 
# @dev System Controller is the management contract of this contract.
#
# @version 0.1.0b14
#
# @system Contract Hierarchy
#   Instrument Controller
#       Instrument Registry    
#           Asset Registry
#               Set Registry
#                   Parent Asset Factory
#                   Parent Set Factory
#                       Parent Token Factory
#                           Asset
#                               Set
#                                   Year
#                                       Month
#                                           Day
#   ========================================================
#                                               ERC-20 Token




struct Set:
    expiration: timestamp[4] # UNIX timestamp

struct Asset: # ERC-20 Token
    name: string[64]
    symbol: string[64]
    decimals: uint256
    assetAddress: address

struct Token:
    symbol: string[64]
    strike: Asset
    underlying: Asset
    set: Set

struct AssetPair: # Entangles two Assets
    strike_asset: Asset
    underlying_asset: Asset
    ratio: uint256 # Amount of strike tokens relative to 1 underlying token

struct Instrument:
    symbol: string[64] # String to represent the instrument
    assets: AssetPair # Assets that the instrument is in charge of
    set: Set # Set that the instrument is a part of (A cohort)
    instrumentAddress: address

struct InstrumentRegistry:
    symbol: string[64] # String to represent types of instruments
    instruments: address[16]
    #instruments: map(uint256, Instrument) # Maps an id number to an instrument a part of that registry

#struct AssetFactory:
#    symbol: uint256 # Symbol to Id
#    assets: map(uint256, AssetPair) # Asset pairs generated by factory
#    facAddress: address
#
#struct SetFactory: 
#    symbol: uint256
#    sets: map(uint256, Set) # Sets generated by factory
#    facAddress: address
#
#struct TokenFactory:
#    symbol: uint256
#    Tokens: map(uint256, Token) # Tokens generated by factory
#    facAddress: address
#
#struct InstrumentFactory:
#    symbol: uint256
#    instruments: map(uint256, Instrument) # Instruments generated by factory
#    facAddress: address

struct FactoryRegistry:
    symbol: string[64]
    asset: address
    set: address
    token: address
    instrument: address

struct Registry:
    symbol: string[64]
    factories: FactoryRegistry
    instruments: InstrumentRegistry

contract AssetFactory():
    def name() -> string[64]:constant
    def createPair(_symbol: string[64], _strike: address, _underlying: address, _ratio: uint256) -> bool:modifying
    def getPair(_symbol: string[64]) -> uint256:constant

contract SetFactory():
    def name() -> string[64]:constant
    def createSet(_symbol: string[64], _epoch: timestamp, _cycle: uint256) -> Set: modifying

contract TokenFactory():
    def name() -> string[64]:constant

contract InstrumentFactory():
    def name() -> string[64]:constant







# Interfaces





# Events


Payment: event({_from: indexed(address), _value: wei_value})


# CONSTANTS

MONTH_IN_SECONDS: constant(uint256) = 604800



# State Variables


administrator: public(address)
depreciation: public(timestamp)


sets: public(map(string[64], Set))
set: public(Set)
assets: public(map(string[64], Asset))
tokens: map(string[64], Token)
assetPair: public(map(string[64], AssetPair))
instrumentFactory: InstrumentFactory
assetFactory: AssetFactory
setFactory: SetFactory
tokenFactory: TokenFactory
factoryRegistry: FactoryRegistry
instrumentsRegistry: InstrumentRegistry
registry: Registry
instruments: map(uint256, Instrument)
instrumentIndex: uint256

dummyAsset: Asset
dummyPair: public(AssetPair)


# Fallback and Utility Functions


@public
@payable
def __default__():
    log.Payment(msg.sender, msg.value)


# Core Functions

# Create Instrument
#   Add to Instrument Registry
#       Instrument Factory
#           Assets
#               Sets
#                   Token Factory
#                       Tokens


@public
def __init__(   _instrumentFactory: address,
                _tokenFactory: address,
                _assetFactory: address,
                _setFactory: address,
                _depreciation: timestamp,
                _symbol: string[64],
            ):
    
    self.administrator = msg.sender
    self.depreciation = _depreciation
    self.instrumentFactory = InstrumentFactory(_instrumentFactory)
    self.assetFactory = AssetFactory(_assetFactory)
    self.setFactory = SetFactory(_setFactory)
    self.tokenFactory = TokenFactory(_tokenFactory)
    self.factoryRegistry = FactoryRegistry({symbol: _symbol, asset: _assetFactory, set: _setFactory, token: _tokenFactory, instrument: _instrumentFactory})
    self.registry = Registry({symbol: _symbol, factories: self.factoryRegistry, instruments: self.instrumentsRegistry})




@public
def createInstrument(_symbol: string[64], _strikeAddress: address, _underlyingAddress: address, _ratio: uint256) -> bool:
    """
    @dev Creates a new instrument with an asset pair, sets, and tokens
    """
    self.sets[_symbol] = self.setFactory.createSet(_symbol, self.depreciation, MONTH_IN_SECONDS)
    #self.assetPair[_symbol] = self.assetFactory.createPair(_symbol, _strikeAddress, _underlyingAddress, _ratio)
    self.assetFactory.createPair(_symbol, _strikeAddress, _underlyingAddress, _ratio)
    self.assetFactory.getPair(_symbol)
    #num: uint256 = self.assetFactory.assetPair(_symbol).ratio
    
    return True