{
  "contractName": "Solo",
  "abi": [
    {
      "name": "Write",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "amount",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "key",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Exercise",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "amount",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "key",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Close",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "amount",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "key",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Mature",
      "inputs": [
        {
          "type": "address",
          "name": "contract_addr",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Payment",
      "inputs": [
        {
          "type": "uint256",
          "name": "amount",
          "indexed": false,
          "unit": "wei"
        },
        {
          "type": "address",
          "name": "source",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "string",
          "name": "_name"
        },
        {
          "type": "string",
          "name": "_symbol"
        },
        {
          "type": "uint256",
          "name": "_decimals"
        },
        {
          "type": "uint256",
          "name": "_ratio"
        },
        {
          "type": "address",
          "name": "_strikeAsset_address"
        },
        {
          "type": "address",
          "name": "_underlyingAsset_address"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_maturity"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "constructor"
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 551
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_spender"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 889
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 73572
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 109266
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 37853
    },
    {
      "name": "write",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "deposit"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 364045
    },
    {
      "name": "close",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 116602
    },
    {
      "name": "exercise",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 122443252
    },
    {
      "name": "expire",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 27183232
    },
    {
      "name": "strikeAsset",
      "outputs": [
        {
          "type": "address",
          "unit": "StrikeAsset",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 881
    },
    {
      "name": "underlyingAsset",
      "outputs": [
        {
          "type": "address",
          "unit": "UnderlyingAsset",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 911
    },
    {
      "name": "admin",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 941
    },
    {
      "name": "maturity",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 971
    },
    {
      "name": "expired",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1001
    },
    {
      "name": "ratio",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1031
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5663
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5693
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1121
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1305
    },
    {
      "name": "total_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1181
    },
    {
      "name": "minter",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1211
    },
    {
      "name": "lockBook__locks__user",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1500
    },
    {
      "name": "lockBook__locks__underlying_amount",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1536
    },
    {
      "name": "lockBook__lock_key",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1379
    },
    {
      "name": "lockBook__lock_length",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1409
    },
    {
      "name": "lockBook__highest_lock",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1439
    },
    {
      "name": "lockBook__lowest_lock",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1469
    },
    {
      "name": "lockBook__lowest_key",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1499
    },
    {
      "name": "highest_key",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1451
    },
    {
      "name": "user_to_key",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1635
    },
    {
      "name": "udr_address",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1511
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05260e0611b096101403934156100a157600080fd5b60606020611b0960c03960c051611b09016102203960406020611b0960c03960c0516004013511156100d257600080fd5b606060206020611b090160c03960c051611b09016102a039604060206020611b090160c03960c05160040135111561010957600080fd5b60206080611b090160c03960c051602051811061012557600080fd5b50602060a0611b090160c03960c051602051811061014257600080fd5b506000331415600254151661015657600080fd5b336002556101c0516000556101e05160015561022080600660c052602060c020602082510161012060006003818352015b8261012051602002111561019a576101bc565b61012051602002850151610120518501555b8151600101808352811415610187575b5050505050506102a080600760c052602060c020602082510161012060006003818352015b826101205160200211156101f457610216565b61012051602002850151610120518501555b81516001018083528114156101e1575b50505050505061018051600855600060093360e05260c052604060c020556000600b5533600c556000610320523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610320a36101a0516005556102005160035533600d60c052602060c020600060e05260c052604060c02060c052602060c020556101e051601055611af156600436101561000d5761181b565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526318160ddd60005114156100c85734156100ba57600080fd5b600b5460005260206000f350005b63dd62ed3e600051141561012f5734156100e157600080fd5b60043560205181106100f257600080fd5b50602435602051811061010457600080fd5b50600a60043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156101f157341561014857600080fd5b600435602051811061015957600080fd5b5060093360e05260c052604060c02080546024358082101561017a57600080fd5b80820390509050815550600960043560e05260c052604060c02080546024358181830110156101a857600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd600051141561030157341561020a57600080fd5b600435602051811061021b57600080fd5b50602435602051811061022d57600080fd5b50600960043560e05260c052604060c02080546044358082101561025057600080fd5b80820390509050815550600960243560e05260c052604060c020805460443581818301101561027e57600080fd5b80820190509050815550600a60043560e05260c052604060c0203360e05260c052604060c0208054604435808210156102b657600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b3600051141561038b57341561031a57600080fd5b600435602051811061032b57600080fd5b50602435600a3360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b60001561043b575b610180526101405261016052600061014051186103af57600080fd5b600b8054610160518181830110156103c657600080fd5b8082019050905081555060096101405160e05260c052604060c0208054610160518181830110156103f657600080fd5b80820190509050815550610160516101a0526101405160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6000156104e7575b6101805261014052610160526000610140511861045f57600080fd5b600b8054610160518082101561047457600080fd5b8082039050905081555060096101405160e05260c052604060c020805461016051808210156104a257600080fd5b80820390509050815550610160516101a0526000610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b632f048afa600051141561080d57341561050057600080fd5b6000610140526000610160526000600f3360e05260c052604060c02054111561053b57600f3360e05260c052604060c02054610140526105a9565b6002600d60c052602060c0200154600181818301101561055a57600080fd5b80820190509050610140526002600d60c052602060c020018054600181818301101561058557600080fd5b8082019050905081555061014051600f3360e05260c052604060c020556001610160525b61016051156105e457600d60c052602060c0206101405160e05260c052604060c02060c052602060c020338155600435600182015550610627565b6001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001805460043581818301101561061c57600080fd5b808201905090508155505b6003600d60c052602060c02001546001600d60c052602060c0206101405160e05260c052604060c02060c052602060c0200154111561069b576001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001546003600d60c052602060c020015561014051600e555b60006004600d60c052602060c0200154116004600d60c052602060c02001546001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020015410161561072c576001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001546004600d60c052602060c0200155610140516005600d60c052602060c02001555b60043561018052610140516101a052337f33d8dc4a860afa0606947f2b214f16e21e7eac41e3eb6642e859d9626d002ef66040610180a26101405161016051610180516101a0516340c10f196101e052336102005260043561022052610220516102005160065801610393565b6101a0526101805261016052610140526000506001543b6107b957600080fd5b60015430186107c757600080fd5b602061034060646323b872dd61028052336102a052306102c0526004356102e05261029c60006001545af16107fb57600080fd5b6000506103405160005260206000f350005b630aebeb4e60005114156109be57341561082657600080fd5b600f3360e05260c052604060c02054610140526004356001600d60c052602060c0206101405160e05260c052604060c02060c052602060c0200154101561086c57600080fd5b60043560093360e05260c052604060c02054101561088957600080fd5b6001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020018054600435808210156108bf57600080fd5b80820390509050815550600435610160526101405161018052600d60c052602060c0206101405160e05260c052604060c02060c052602060c020547f9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e06040610160a2610140516101605161018051636161eb186101c052336101e05260043561020052610200516101e05160065801610443565b6101805261016052610140526000506001543b61096f57600080fd5b600154301861097d57600080fd5b6020610300604463a9059cbb6102605233610280526004356102a05261027c60006001545af16109ac57600080fd5b6000506103005160005260206000f350005b63b07f0a41600051141561111f5760043560093360e05260c052604060c0205410156109e957600080fd5b6005546004358082028215828483041417610a0357600080fd5b8090509050905061014052600435610160526000543b610a2257600080fd5b6000543018610a3057600080fd5b602061024060646323b872dd61018052336101a052306101c052610140516101e05261019c60006000545af1610a6557600080fd5b600050610240506001543b610a7957600080fd5b6001543018610a8757600080fd5b6020610300604463a9059cbb6102605233610280526004356102a05261027c60006001545af1610ab657600080fd5b6000506103005060006103205260006103405261036060016103ff818352015b610360516000811215610ae857600080fd5b61034052610160516003600d60c052602060c02001541115610b3557600d60c052602060c020600e5460e05260c052604060c02060c052602060c0205461032052600e5461034052610ba0565b610160516001600d60c052602060c0206103405160e05260c052604060c02060c052602060c02001541115610b8f57600d60c052602060c0206103405160e05260c052604060c02060c052602060c0205461032052610ba0565b5b8151600101808352811415610ad6575b5050610320511515610fc75761038060016103ff818352015b610380516000811215610bcb57600080fd5b61034052600d60c052602060c0206103405160e05260c052604060c02060c052602060c020546103a0526001600d60c052602060c0206103405160e05260c052604060c02060c052602060c02001546103c0526103c0516103e052610160516103c0511115610c5f57600d60c052602060c0206103405160e05260c052604060c02060c052602060c0205461032052610e46565b6103a0511515610caa57600d60c052602060c02061034051600180821015610c8657600080fd5b8082039050905060e05260c052604060c02060c052602060c020546103a052610e46565b6000543b610cb757600080fd5b6000543018610cc557600080fd5b60206104a0604463a9059cbb610400526103a051610420526005546103e0518082028215828483041417610cf857600080fd5b809050905090506104405261041c60006000545af1610d1657600080fd5b6000506104a05061016080516103c05180821015610d3357600080fd5b808203905090508152506103e0516104c052610340516104e052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d60406104c0a2610140610500525b61050051516020610500510161050052610500610500511015610d9f57610d7d565b636161eb186105205233610540526103e05161056052610560516105405160065801610443565b6104e0610500525b6105005152602061050051036105005261014061050051101515610df157610dce565b6000506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c0200180546103c05180821015610e2b57600080fd5b808203905090508155505b8151600101808352811415610bb9575b50506000543b610e5557600080fd5b6000543018610e6357600080fd5b6020610660604463a9059cbb6105c052610320516105e052600554610160518082028215828483041417610e9657600080fd5b80905090509050610600526105dc60006000545af1610eb457600080fd5b600050610660506101605161068052610680516106a052610340516106c052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d60406106a0a26101406106e0525b6106e0515160206106e051016106e0526106e06106e0511015610f2557610f03565b636161eb186107005233610720526106805161074052610740516107205160065801610443565b6106c06106e0525b6106e0515260206106e051036106e0526101406106e051101515610f7757610f54565b6000506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c0200180546101605180821015610fb157600080fd5b80820390509050815550600160005260206000f3505b6000543b610fd457600080fd5b6000543018610fe257600080fd5b6020610840604463a9059cbb6107a052610320516107c052610140516107e0526107bc60006000545af161101557600080fd5b600050610840506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c020018054610160518082101561105357600080fd5b80820390509050815550600435610860526103405161088052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d6040610860a26101406108a0525b6108a0515160206108a051016108a0526108a06108a05110156110be5761109c565b636161eb186108c052336108e05260043561090052610900516108e05160065801610443565b6108806108a0525b6108a0515260206108a051036108a0526101406108a05110151561110f576110ec565b600050600160005260206000f350005b6379599f9660005114156112f057341561113857600080fd5b4260035410156111485760016004555b60045461115457600080fd5b60016101405261016060016103fe818352015b600d60c052602060c02061016051600081121561118357600080fd5b60e05260c052604060c02060c052602060c0205415156111a2576112dc565b6101605160008112156111b457600080fd5b610140526001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020015461018052600d60c052602060c0206101405160e05260c052604060c02060c052602060c020546101a0526000610180511115611269576001543b61122057600080fd5b600154301861122e57600080fd5b6020610260604463a9059cbb6101c0526101a0516101e05261018051610200526101dc60006001545af161126157600080fd5b600050610260505b60006001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001556101805161028052610140516102a0526101a0517f9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e06040610280a25b8151600101808352811415611167575b50506000600b55600160005260206000f350005b6317d69bc8600051141561131757341561130957600080fd5b60005460005260206000f350005b637158da7c600051141561133e57341561133057600080fd5b60015460005260206000f350005b63f851a440600051141561136557341561135757600080fd5b60025460005260206000f350005b63204f83f9600051141561138c57341561137e57600080fd5b60035460005260206000f350005b634c2067c760005114156113b35734156113a557600080fd5b60045460005260206000f350005b6371ca337d60005114156113da5734156113cc57600080fd5b60055460005260206000f350005b6306fdde03600051141561148e5734156113f357600080fd5b60068060c052602060c020610180602082540161012060006003818352015b8261012051602002111561142557611447565b61012051850154610120516020028501525b8151600101808352811415611412575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b4160005114156115425734156114a757600080fd5b60078060c052602060c020610180602082540161012060006003818352015b826101205160200211156114d9576114fb565b61012051850154610120516020028501525b81516001018083528114156114c6575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce567600051141561156957341561155b57600080fd5b60085460005260206000f350005b6370a0823160005114156115b057341561158257600080fd5b600435602051811061159357600080fd5b50600960043560e05260c052604060c0205460005260206000f350005b633940e9ee60005114156115d75734156115c957600080fd5b600b5460005260206000f350005b630754617260005114156115fe5734156115f057600080fd5b600c5460005260206000f350005b633d32d111600051141561164357341561161757600080fd5b600d60c052602060c02060043560e05260c052604060c02060c052602060c0205460005260206000f350005b6394f2196b600051141561168b57341561165c57600080fd5b6001600d60c052602060c02060043560e05260c052604060c02060c052602060c020015460005260206000f350005b631958e1f060005114156116bd5734156116a457600080fd5b6001600d60c052602060c020015460005260206000f350005b63e6b316f060005114156116ef5734156116d657600080fd5b6002600d60c052602060c020015460005260206000f350005b637047a056600051141561172157341561170857600080fd5b6003600d60c052602060c020015460005260206000f350005b638ccd151f600051141561175357341561173a57600080fd5b6004600d60c052602060c020015460005260206000f350005b6372de7f41600051141561178557341561176c57600080fd5b6005600d60c052602060c020015460005260206000f350005b63760a11c160005114156117ac57341561179e57600080fd5b600e5460005260206000f350005b63dd6b337f60005114156117f35734156117c557600080fd5b60043560205181106117d657600080fd5b50600f60043560e05260c052604060c0205460005260206000f350005b63a6abeea5600051141561181a57341561180c57600080fd5b60105460005260206000f350005b5b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a25b6102a8611af1036102a86000396102a8611af1036000f3",
  "deployedBytecode": "0x600436101561000d5761181b565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526318160ddd60005114156100c85734156100ba57600080fd5b600b5460005260206000f350005b63dd62ed3e600051141561012f5734156100e157600080fd5b60043560205181106100f257600080fd5b50602435602051811061010457600080fd5b50600a60043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156101f157341561014857600080fd5b600435602051811061015957600080fd5b5060093360e05260c052604060c02080546024358082101561017a57600080fd5b80820390509050815550600960043560e05260c052604060c02080546024358181830110156101a857600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd600051141561030157341561020a57600080fd5b600435602051811061021b57600080fd5b50602435602051811061022d57600080fd5b50600960043560e05260c052604060c02080546044358082101561025057600080fd5b80820390509050815550600960243560e05260c052604060c020805460443581818301101561027e57600080fd5b80820190509050815550600a60043560e05260c052604060c0203360e05260c052604060c0208054604435808210156102b657600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b3600051141561038b57341561031a57600080fd5b600435602051811061032b57600080fd5b50602435600a3360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b60001561043b575b610180526101405261016052600061014051186103af57600080fd5b600b8054610160518181830110156103c657600080fd5b8082019050905081555060096101405160e05260c052604060c0208054610160518181830110156103f657600080fd5b80820190509050815550610160516101a0526101405160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6000156104e7575b6101805261014052610160526000610140511861045f57600080fd5b600b8054610160518082101561047457600080fd5b8082039050905081555060096101405160e05260c052604060c020805461016051808210156104a257600080fd5b80820390509050815550610160516101a0526000610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b632f048afa600051141561080d57341561050057600080fd5b6000610140526000610160526000600f3360e05260c052604060c02054111561053b57600f3360e05260c052604060c02054610140526105a9565b6002600d60c052602060c0200154600181818301101561055a57600080fd5b80820190509050610140526002600d60c052602060c020018054600181818301101561058557600080fd5b8082019050905081555061014051600f3360e05260c052604060c020556001610160525b61016051156105e457600d60c052602060c0206101405160e05260c052604060c02060c052602060c020338155600435600182015550610627565b6001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001805460043581818301101561061c57600080fd5b808201905090508155505b6003600d60c052602060c02001546001600d60c052602060c0206101405160e05260c052604060c02060c052602060c0200154111561069b576001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001546003600d60c052602060c020015561014051600e555b60006004600d60c052602060c0200154116004600d60c052602060c02001546001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020015410161561072c576001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001546004600d60c052602060c0200155610140516005600d60c052602060c02001555b60043561018052610140516101a052337f33d8dc4a860afa0606947f2b214f16e21e7eac41e3eb6642e859d9626d002ef66040610180a26101405161016051610180516101a0516340c10f196101e052336102005260043561022052610220516102005160065801610393565b6101a0526101805261016052610140526000506001543b6107b957600080fd5b60015430186107c757600080fd5b602061034060646323b872dd61028052336102a052306102c0526004356102e05261029c60006001545af16107fb57600080fd5b6000506103405160005260206000f350005b630aebeb4e60005114156109be57341561082657600080fd5b600f3360e05260c052604060c02054610140526004356001600d60c052602060c0206101405160e05260c052604060c02060c052602060c0200154101561086c57600080fd5b60043560093360e05260c052604060c02054101561088957600080fd5b6001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020018054600435808210156108bf57600080fd5b80820390509050815550600435610160526101405161018052600d60c052602060c0206101405160e05260c052604060c02060c052602060c020547f9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e06040610160a2610140516101605161018051636161eb186101c052336101e05260043561020052610200516101e05160065801610443565b6101805261016052610140526000506001543b61096f57600080fd5b600154301861097d57600080fd5b6020610300604463a9059cbb6102605233610280526004356102a05261027c60006001545af16109ac57600080fd5b6000506103005160005260206000f350005b63b07f0a41600051141561111f5760043560093360e05260c052604060c0205410156109e957600080fd5b6005546004358082028215828483041417610a0357600080fd5b8090509050905061014052600435610160526000543b610a2257600080fd5b6000543018610a3057600080fd5b602061024060646323b872dd61018052336101a052306101c052610140516101e05261019c60006000545af1610a6557600080fd5b600050610240506001543b610a7957600080fd5b6001543018610a8757600080fd5b6020610300604463a9059cbb6102605233610280526004356102a05261027c60006001545af1610ab657600080fd5b6000506103005060006103205260006103405261036060016103ff818352015b610360516000811215610ae857600080fd5b61034052610160516003600d60c052602060c02001541115610b3557600d60c052602060c020600e5460e05260c052604060c02060c052602060c0205461032052600e5461034052610ba0565b610160516001600d60c052602060c0206103405160e05260c052604060c02060c052602060c02001541115610b8f57600d60c052602060c0206103405160e05260c052604060c02060c052602060c0205461032052610ba0565b5b8151600101808352811415610ad6575b5050610320511515610fc75761038060016103ff818352015b610380516000811215610bcb57600080fd5b61034052600d60c052602060c0206103405160e05260c052604060c02060c052602060c020546103a0526001600d60c052602060c0206103405160e05260c052604060c02060c052602060c02001546103c0526103c0516103e052610160516103c0511115610c5f57600d60c052602060c0206103405160e05260c052604060c02060c052602060c0205461032052610e46565b6103a0511515610caa57600d60c052602060c02061034051600180821015610c8657600080fd5b8082039050905060e05260c052604060c02060c052602060c020546103a052610e46565b6000543b610cb757600080fd5b6000543018610cc557600080fd5b60206104a0604463a9059cbb610400526103a051610420526005546103e0518082028215828483041417610cf857600080fd5b809050905090506104405261041c60006000545af1610d1657600080fd5b6000506104a05061016080516103c05180821015610d3357600080fd5b808203905090508152506103e0516104c052610340516104e052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d60406104c0a2610140610500525b61050051516020610500510161050052610500610500511015610d9f57610d7d565b636161eb186105205233610540526103e05161056052610560516105405160065801610443565b6104e0610500525b6105005152602061050051036105005261014061050051101515610df157610dce565b6000506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c0200180546103c05180821015610e2b57600080fd5b808203905090508155505b8151600101808352811415610bb9575b50506000543b610e5557600080fd5b6000543018610e6357600080fd5b6020610660604463a9059cbb6105c052610320516105e052600554610160518082028215828483041417610e9657600080fd5b80905090509050610600526105dc60006000545af1610eb457600080fd5b600050610660506101605161068052610680516106a052610340516106c052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d60406106a0a26101406106e0525b6106e0515160206106e051016106e0526106e06106e0511015610f2557610f03565b636161eb186107005233610720526106805161074052610740516107205160065801610443565b6106c06106e0525b6106e0515260206106e051036106e0526101406106e051101515610f7757610f54565b6000506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c0200180546101605180821015610fb157600080fd5b80820390509050815550600160005260206000f3505b6000543b610fd457600080fd5b6000543018610fe257600080fd5b6020610840604463a9059cbb6107a052610320516107c052610140516107e0526107bc60006000545af161101557600080fd5b600050610840506001600d60c052602060c0206103405160e05260c052604060c02060c052602060c020018054610160518082101561105357600080fd5b80820390509050815550600435610860526103405161088052337f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d6040610860a26101406108a0525b6108a0515160206108a051016108a0526108a06108a05110156110be5761109c565b636161eb186108c052336108e05260043561090052610900516108e05160065801610443565b6108806108a0525b6108a0515260206108a051036108a0526101406108a05110151561110f576110ec565b600050600160005260206000f350005b6379599f9660005114156112f057341561113857600080fd5b4260035410156111485760016004555b60045461115457600080fd5b60016101405261016060016103fe818352015b600d60c052602060c02061016051600081121561118357600080fd5b60e05260c052604060c02060c052602060c0205415156111a2576112dc565b6101605160008112156111b457600080fd5b610140526001600d60c052602060c0206101405160e05260c052604060c02060c052602060c020015461018052600d60c052602060c0206101405160e05260c052604060c02060c052602060c020546101a0526000610180511115611269576001543b61122057600080fd5b600154301861122e57600080fd5b6020610260604463a9059cbb6101c0526101a0516101e05261018051610200526101dc60006001545af161126157600080fd5b600050610260505b60006001600d60c052602060c0206101405160e05260c052604060c02060c052602060c02001556101805161028052610140516102a0526101a0517f9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e06040610280a25b8151600101808352811415611167575b50506000600b55600160005260206000f350005b6317d69bc8600051141561131757341561130957600080fd5b60005460005260206000f350005b637158da7c600051141561133e57341561133057600080fd5b60015460005260206000f350005b63f851a440600051141561136557341561135757600080fd5b60025460005260206000f350005b63204f83f9600051141561138c57341561137e57600080fd5b60035460005260206000f350005b634c2067c760005114156113b35734156113a557600080fd5b60045460005260206000f350005b6371ca337d60005114156113da5734156113cc57600080fd5b60055460005260206000f350005b6306fdde03600051141561148e5734156113f357600080fd5b60068060c052602060c020610180602082540161012060006003818352015b8261012051602002111561142557611447565b61012051850154610120516020028501525b8151600101808352811415611412575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b4160005114156115425734156114a757600080fd5b60078060c052602060c020610180602082540161012060006003818352015b826101205160200211156114d9576114fb565b61012051850154610120516020028501525b81516001018083528114156114c6575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce567600051141561156957341561155b57600080fd5b60085460005260206000f350005b6370a0823160005114156115b057341561158257600080fd5b600435602051811061159357600080fd5b50600960043560e05260c052604060c0205460005260206000f350005b633940e9ee60005114156115d75734156115c957600080fd5b600b5460005260206000f350005b630754617260005114156115fe5734156115f057600080fd5b600c5460005260206000f350005b633d32d111600051141561164357341561161757600080fd5b600d60c052602060c02060043560e05260c052604060c02060c052602060c0205460005260206000f350005b6394f2196b600051141561168b57341561165c57600080fd5b6001600d60c052602060c02060043560e05260c052604060c02060c052602060c020015460005260206000f350005b631958e1f060005114156116bd5734156116a457600080fd5b6001600d60c052602060c020015460005260206000f350005b63e6b316f060005114156116ef5734156116d657600080fd5b6002600d60c052602060c020015460005260206000f350005b637047a056600051141561172157341561170857600080fd5b6003600d60c052602060c020015460005260206000f350005b638ccd151f600051141561175357341561173a57600080fd5b6004600d60c052602060c020015460005260206000f350005b6372de7f41600051141561178557341561176c57600080fd5b6005600d60c052602060c020015460005260206000f350005b63760a11c160005114156117ac57341561179e57600080fd5b600e5460005260206000f350005b63dd6b337f60005114156117f35734156117c557600080fd5b60043560205181106117d657600080fd5b50600f60043560e05260c052604060c0205460005260206000f350005b63a6abeea5600051141561181a57341561180c57600080fd5b60105460005260206000f350005b5b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a2",
  "source": "# @title SOLO: Call Option - Multilateral Optionality Asset Transfer: MOAT\r\n# \r\n# @notice Implementation of a Tokenized Asset Transfer Agreement on the Ethereum Network\r\n# \r\n# @author Alexander Angel\r\n# \r\n# @dev Initialized by an administrator to be a standalone instrument - Inspired by a Call Option\r\n#\r\n# @version 0.1.0b14\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\nimplements: ERC20\r\n\r\n\r\n# Structs\r\nstruct Account:\r\n    user: address\r\n    underlying_amount: uint256\r\n\r\n\r\nstruct LockBook:\r\n    locks: map(uint256, Account)\r\n    lock_key: uint256\r\n    lock_length: uint256\r\n    highest_lock: uint256\r\n    lowest_lock: uint256\r\n    lowest_key: uint256\r\n\r\n\r\n# Interfaces\r\ncontract StrikeAsset():\r\n    def totalSupply() -> uint256:constant\r\n    def balanceOf(_owner: address) -> uint256:constant\r\n    def allowance(_owner: address, _spender: address) -> uint256:constant\r\n    def transfer(_to: address, _value: uint256) -> bool:modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool:modifying\r\n    def approve(_spender: address, _value: uint256) -> bool:modifying\r\n\r\n\r\ncontract UnderlyingAsset():\r\n    def totalSupply() -> uint256:constant\r\n    def balanceOf(_owner: address) -> uint256:constant\r\n    def allowance(_owner: address, _spender: address) -> uint256:constant\r\n    def transfer(_to: address, _value: uint256) -> bool:modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool:modifying\r\n    def approve(_spender: address, _value: uint256) -> bool:modifying\r\n\r\n\r\n# Events\r\nWrite: event({_from: indexed(address), amount: uint256, key: uint256})\r\nExercise: event({_from: indexed(address), amount: uint256, key: uint256})\r\nClose: event({_from: indexed(address), amount: uint256, key: uint256})\r\nMature: event({contract_addr: indexed(address)})\r\nPayment: event({amount: wei_value, source: indexed(address)})\r\n\r\n\r\n# EIP-20 Events\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\r\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\r\n\r\n\r\n# Interface Contracts\r\nstrikeAsset: public(StrikeAsset)\r\nunderlyingAsset: public(UnderlyingAsset)\r\n\r\n\r\n# Administrator - For Early Versions ONLY\r\nadmin: public(address)\r\n\r\n\r\n# Contract specific parameters\r\nmaturity: public(timestamp) # UNIX Timestamp\r\nexpired: public(bool) # Expired tokens are worthless\r\nratio: public(uint256)\r\n\r\n# EIP-20\r\nname: public(string[64])\r\nsymbol: public(string[64])\r\ndecimals: public(uint256)\r\nbalanceOf: public(map(address, uint256))\r\nallowances: map(address, map(address, uint256))\r\ntotal_supply: public(uint256)\r\nminter: public(address)\r\n\r\n\r\n# User Claims\r\nlockBook: public(LockBook) # Struct for lists of underlying deposits\r\nhighest_key: public(uint256) # Largest underlying deposit respective key\r\nuser_to_key: public(map(address, uint256)) # Link users to their keys, 1 key per address\r\n\r\n\r\n# Test\r\nudr_address: public(address)\r\n\r\n# Constants\r\nMAX_KEY_LENGTH: constant(uint256) = 2**10-1 # Used for looping over the book\r\n\r\n\r\n@public\r\n@payable\r\ndef __default__():\r\n    log.Payment(msg.value, msg.sender)\r\n\r\n\r\n# Initializer\r\n@public\r\ndef __init__(\r\n        _name: string[64],\r\n        _symbol: string[64],\r\n        _decimals: uint256,\r\n        _ratio: uint256,\r\n        _strikeAsset_address: address,\r\n        _underlyingAsset_address: address,\r\n        _maturity: timestamp,\r\n    ):\r\n    \"\"\"\r\n    @notice                         A standalone version of this option is initialized on deploy\r\n    @param _name                    Name of this contract linked to its parameters\r\n    @param _symbol                  Naming convention to represent the paramers -> \r\n                                    Strike Symbol + Underlying Symbol + UNIX Timestamp + \r\n                                    Type (C or P) + # of Strike tokens per # of Underlying tokens\r\n    @param _decimals                Decimals of ERC-20 Native to this contract\r\n    @param _ratio                   Strike:Underlying ratio \r\n    @param _strikeAsset_address     Address of strike asset contract\r\n    @param _underlyingAsset_address Address of underlying asset contract\r\n    @param _maturity                Timestamp of expiry date\r\n    \"\"\"\r\n    assert self.admin == ZERO_ADDRESS and msg.sender != ZERO_ADDRESS\r\n    \r\n    \r\n    # Administrative variables\r\n    self.admin = msg.sender\r\n\r\n\r\n    # Interfaces\r\n    self.strikeAsset = StrikeAsset(_strikeAsset_address)\r\n    self.underlyingAsset = UnderlyingAsset(_underlyingAsset_address)\r\n\r\n\r\n    # EIP-20 Standard\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.decimals = _decimals\r\n    self.balanceOf[msg.sender] = 0\r\n    self.total_supply = 0\r\n    self.minter = msg.sender\r\n    log.Transfer(ZERO_ADDRESS, msg.sender, 0)\r\n\r\n\r\n    # Contract Specifications\r\n    self.ratio = _ratio\r\n    self.maturity = _maturity\r\n\r\n\r\n    # Set first book account to admin\r\n    self.lockBook.locks[0].user = msg.sender\r\n\r\n\r\n    # Test\r\n    self.udr_address = _underlyingAsset_address\r\n\r\n\r\n# EIP-20 Functions - Source: https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC20.vy\r\n@public\r\n@constant\r\ndef totalSupply() -> uint256:\r\n    \"\"\"\r\n    @dev Total number of tokens in existence.\r\n    \"\"\"\r\n    return self.total_supply\r\n\r\n@public\r\n@constant\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    \"\"\"\r\n    @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    @param _owner The address which owns the funds.\r\n    @param _spender The address which will spend the funds.\r\n    @return An uint256 specifying the amount of tokens still available for the spender.\r\n    \"\"\"\r\n    return self.allowances[_owner][_spender]\r\n\r\n\r\n@public\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@public\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n          Note that while this function emits a Transfer event, this is not required as per the specification,\r\n          and other compliant implementations may not emit the event.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    # NOTE: vyper does not allow underflows\r\n    #      so the following subtraction would revert on insufficient allowance\r\n    self.allowances[_from][msg.sender] -= _value\r\n    log.Transfer(_from, _to, _value)\r\n    return True\r\n\r\n\r\n@public\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n         Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    \"\"\"\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log.Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@private\r\ndef mint(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Mint an amount of the token and assigns it to an account. \r\n         This encapsulates the modification of balances such that the\r\n         proper events are emitted.\r\n    @param _to The account that will receive the created tokens.\r\n    @param _value The amount that will be created.\r\n    \"\"\"\r\n    assert _to != ZERO_ADDRESS\r\n    self.total_supply += _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n\r\n@private\r\ndef _burn(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Internal function that burns an amount of the token of a given\r\n         account.\r\n    @param _to The account whose tokens will be burned.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    assert _to != ZERO_ADDRESS\r\n    self.total_supply -= _value\r\n    self.balanceOf[_to] -= _value\r\n    log.Transfer(_to, ZERO_ADDRESS, _value)\r\n\r\n\r\n# Core\r\n@public\r\ndef write(deposit: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Writer mints tokens at a 1:1 ratio of deposited assets\r\n    @param deposit Deposit amount of underlying assets, 18 decimal places\r\n    \"\"\"\r\n    # CHECKS\r\n    lock_key: uint256 = 0 # Temp variable lock key number\r\n    new_key: bool = False\r\n    if(self.user_to_key[msg.sender] > 0): # If user has a key, use their key\r\n        lock_key = self.user_to_key[msg.sender]\r\n    else: # Else, increment key length, and set a new Account\r\n        lock_key = self.lockBook.lock_length + 1 # Temporary lock key is length + 1\r\n        self.lockBook.lock_length += 1 # Increment the lock key length\r\n        self.user_to_key[msg.sender] = lock_key # Set user address to lock key\r\n        new_key = True\r\n    \r\n    # EFFECTS\r\n    if(new_key):\r\n        self.lockBook.locks[lock_key] = Account({user: msg.sender, underlying_amount: deposit}) # Create new account at [key]\r\n    else:\r\n        self.lockBook.locks[lock_key].underlying_amount += deposit\r\n    # Set highest lock key if highest amount    \r\n    if(self.lockBook.locks[lock_key].underlying_amount > self.lockBook.highest_lock): # If underlying amount is greater, set new highest_key\r\n        self.lockBook.highest_lock = self.lockBook.locks[lock_key].underlying_amount\r\n        self.highest_key = lock_key\r\n    # Set lowest lock key if lowest amount\r\n    if(self.lockBook.locks[lock_key].underlying_amount < self.lockBook.lowest_lock and self.lockBook.lowest_lock > 0):\r\n        self.lockBook.lowest_lock = self.lockBook.locks[lock_key].underlying_amount\r\n        self.lockBook.lowest_key = lock_key\r\n\r\n    # INERACTIONS\r\n    log.Write(msg.sender, deposit, lock_key)\r\n    self.mint(msg.sender, deposit)\r\n    return self.underlyingAsset.transferFrom(msg.sender, self, deposit) # User deposits underwritten amount into contract\r\n\r\n\r\n@public\r\ndef close(amount: uint256) -> bool:\r\n    \"\"\"\r\n    @dev          Writer can burn cMOAT tokens to redeem their underlying deposits\r\n    @param amount Amount of cMOAT tokens to burn, 18 decimals  \r\n    \"\"\"\r\n    # CHECKS\r\n    key: uint256 = self.user_to_key[msg.sender]\r\n    assert self.lockBook.locks[key].underlying_amount >= amount # Check user redeeming has underwritten\r\n    assert self.balanceOf[msg.sender] >= amount # Check user has cMOAT tokens to burn\r\n    \r\n    # EFFECTS\r\n    self.lockBook.locks[key].underlying_amount -= amount \r\n    \r\n    # INTERACTIONS\r\n    log.Close(self.lockBook.locks[key].user, amount, key)\r\n    self._burn(msg.sender, amount) # Burn the cMOAT tokens that were redeemed for underwritten assets\r\n    return self.underlyingAsset.transfer(msg.sender, amount) # Underlying asset redeemed to user\r\n\r\n\r\n@public\r\n@payable\r\ndef exercise(amount: uint256) -> bool:\r\n    \"\"\"\r\n    @dev   Exercising party exchanges strike asset for underlying asset\r\n    @param Amount of cMOAT tokens being exercised, 18 decimals\r\n    \"\"\"\r\n    # CHECKS\r\n    assert self.balanceOf[msg.sender] >= amount\r\n    strike_payment: uint256 = self.ratio * amount  \r\n    underlying_payment: uint256 = amount\r\n\r\n    # FIX - Should be at end of interactions phase\r\n    # Payouts to exerciser\r\n    self.strikeAsset.transferFrom(msg.sender, self, strike_payment) # Deposit strike asset\r\n    self.underlyingAsset.transfer(msg.sender, amount) # Withdraw underlying asset from contract\r\n\r\n\r\n    assigned_user: address = ZERO_ADDRESS\r\n    lock_key: uint256 = 0\r\n\r\n\r\n    # EFFECTS\r\n    # Update Underwriter's struct of locked funds\r\n    for x in range(1, MAX_KEY_LENGTH + 1): # Loops over underwriters and depletes underlying_payment outlays\r\n        lock_key = convert(x, uint256)\r\n        if(self.lockBook.highest_lock > underlying_payment): # If the highest underwritten amount > payment, assign that user\r\n            assigned_user = self.lockBook.locks[self.highest_key].user\r\n            lock_key = self.highest_key\r\n            break\r\n        if(self.lockBook.locks[lock_key].underlying_amount > underlying_payment): # If the looped user has underwritten > payment, assign that user\r\n            assigned_user = self.lockBook.locks[lock_key].user\r\n            break\r\n\r\n    \r\n    if(assigned_user == ZERO_ADDRESS): # If no assigned user, need to assign multiple users\r\n        for i in range(1, MAX_KEY_LENGTH + 1):\r\n            lock_key = convert(i, uint256)\r\n            user: address = self.lockBook.locks[lock_key].user # Get user address of lock_key\r\n            underlying_amount: uint256 = self.lockBook.locks[lock_key].underlying_amount # Get underlying amount of user\r\n            options_exercised: uint256 = underlying_amount  # Get max amount of options that can be exercised\r\n            if(underlying_amount > underlying_payment): # If the looped user has underwritten > underlying left, assign that user\r\n                assigned_user = self.lockBook.locks[lock_key].user\r\n                break\r\n            \r\n            # We need to exercise options using multiple underwritten balances\r\n            if(user == ZERO_ADDRESS): # If we pass over all users but there are still options oustanding to be exercised, set previous user as user\r\n                user = self.lockBook.locks[lock_key - 1].user\r\n                break\r\n            self.strikeAsset.transfer(user, self.ratio * options_exercised ) # Transfer proportional strike payment to entire balance of assigned user\r\n            underlying_payment -= underlying_amount # Update underlying payment leftover   \r\n            log.Exercise(msg.sender, options_exercised, lock_key)\r\n            self._burn(msg.sender, options_exercised) # Burn amount of tokens proportional to entire underlying balance of user\r\n            self.lockBook.locks[lock_key].underlying_amount -= underlying_amount # Update user's underlying amount\r\n        \r\n        # We have a user who can pay entire leftover exercised amount\r\n        self.strikeAsset.transfer(assigned_user, self.ratio * underlying_payment)\r\n        options_exercised: uint256 = underlying_payment\r\n        log.Exercise(msg.sender, options_exercised, lock_key)\r\n        self._burn(msg.sender, options_exercised)\r\n        self.lockBook.locks[lock_key].underlying_amount -= underlying_payment # Assigned user exercises the rest of the underlying payment\r\n        return True\r\n    \r\n\r\n    # INTERACTIONS\r\n    # We have a user who can pay entire exercised amount\r\n    self.strikeAsset.transfer(assigned_user, strike_payment)\r\n    self.lockBook.locks[lock_key].underlying_amount -= underlying_payment # Assigned user pays the exercised underlying amount\r\n    log.Exercise(msg.sender, amount, lock_key)\r\n    self._burn(msg.sender, amount)\r\n    return True\r\n\r\n\r\n@public\r\ndef expire() -> bool:\r\n    \"\"\"\r\n    @notice Any user can call this public function to expire this specific token\r\n    @dev    Sets total supply to 0, does not burn any tokens\r\n    \"\"\"\r\n    if(self.maturity < block.timestamp):\r\n        self.expired = True\r\n    assert self.expired # UNIX timestamp < block.timestamp\r\n    key: uint256 = 1 # Temporary key value \r\n    for x in range(1, MAX_KEY_LENGTH): # For each key, redeem the tokens to their underwriters, burn the cMOAT tokens\r\n        if(self.lockBook.locks[convert(x, uint256)].user == ZERO_ADDRESS): # If we reach end of users in the lock book, end the loop\r\n            break\r\n        key = convert(x, uint256)\r\n        underlying_amt: uint256 = self.lockBook.locks[key].underlying_amount\r\n        user: address = self.lockBook.locks[key].user\r\n        if(underlying_amt > 0):\r\n            self.underlyingAsset.transfer(user, underlying_amt) # underlying asset sent to writer\r\n        self.lockBook.locks[key].underlying_amount = 0\r\n        log.Close(user, underlying_amt, key)\r\n    self.total_supply = 0\r\n    return True",
  "sourcePath": "C:/Users/alexa/OneDrive/Documents/Master/Blockchain/Projects/Emerald_Project/contracts/Standalone/Solo.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b14+commit.49b201c"
  },
  "networks": {
    "5777": {
      "events": {
        "0x33d8dc4a860afa0606947f2b214f16e21e7eac41e3eb6642e859d9626d002ef6": {
          "name": "Write",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "amount",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "key",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x33d8dc4a860afa0606947f2b214f16e21e7eac41e3eb6642e859d9626d002ef6"
        },
        "0x7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d": {
          "name": "Exercise",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "amount",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "key",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d"
        },
        "0x9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e0": {
          "name": "Close",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "amount",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "key",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x9d801553d397b8274b513890b6fc73f1a5edcf9ab99ee408d64b6e36889433e0"
        },
        "0x2eb828fdc16ef5c267a7b18c3f8edf180aaff1a8921c4fe994fef55ddc8abe60": {
          "name": "Mature",
          "inputs": [
            {
              "type": "address",
              "name": "contract_addr",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x2eb828fdc16ef5c267a7b18c3f8edf180aaff1a8921c4fe994fef55ddc8abe60"
        },
        "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e": {
          "name": "Payment",
          "inputs": [
            {
              "type": "uint256",
              "name": "amount",
              "indexed": false,
              "unit": "wei"
            },
            {
              "type": "address",
              "name": "source",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "name": "Transfer",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_to",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "name": "Approval",
          "inputs": [
            {
              "type": "address",
              "name": "_owner",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_spender",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        }
      },
      "links": {},
      "address": "0xBeAEba38d8D5d93C61EF5dAfFC5da61e4199083a",
      "transactionHash": "0xcfe7df84dcb55cbde1992fa347483de69804ddaa403ce78cccf965606a2ebd05"
    }
  },
  "schemaVersion": "3.0.19",
  "updatedAt": "2019-11-30T16:08:17.068Z",
  "networkType": "ethereum"
}