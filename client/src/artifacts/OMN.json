{
  "contractName": "OMN",
  "abi": [
    {
      "name": "Exercise",
      "inputs": [
        {
          "type": "address",
          "name": "eco",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Close",
      "inputs": [
        {
          "type": "address",
          "name": "eco",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Mature",
      "inputs": [
        {
          "type": "address",
          "name": "eco",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Payment",
      "inputs": [
        {
          "type": "uint256",
          "name": "amount",
          "indexed": false,
          "unit": "wei"
        },
        {
          "type": "address",
          "name": "source",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_strike"
        },
        {
          "type": "uint256",
          "name": "_underlying"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_maturity"
        },
        {
          "type": "address",
          "name": "_slate_address"
        },
        {
          "type": "address",
          "name": "_stash_address"
        },
        {
          "type": "address",
          "name": "_wax_address"
        },
        {
          "type": "address",
          "name": "_strikeAsset_address"
        },
        {
          "type": "address",
          "name": "_underlyingAsset_address"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 609628
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 581
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_spender"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 919
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 73602
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 109296
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 37883
    },
    {
      "name": "burn",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 74405
    },
    {
      "name": "burnFrom",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 110095
    },
    {
      "name": "isMature",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2575
    },
    {
      "name": "write",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_underlying"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 83389
    },
    {
      "name": "sell",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "token_amount"
        },
        {
          "type": "uint256",
          "name": "ask_price"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 108834
    },
    {
      "name": "purchase",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "token_amount"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 113369
    },
    {
      "name": "exercise",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 126720
    },
    {
      "name": "close",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 81969
    },
    {
      "name": "factory",
      "outputs": [
        {
          "type": "address",
          "unit": "Factory",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1031
    },
    {
      "name": "slate",
      "outputs": [
        {
          "type": "address",
          "unit": "Slate",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1061
    },
    {
      "name": "stash",
      "outputs": [
        {
          "type": "address",
          "unit": "Stash",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1091
    },
    {
      "name": "strikeAsset",
      "outputs": [
        {
          "type": "address",
          "unit": "StrikeAsset",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1121
    },
    {
      "name": "underlyingAsset",
      "outputs": [
        {
          "type": "address",
          "unit": "UnderlyingAsset",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1151
    },
    {
      "name": "wax",
      "outputs": [
        {
          "type": "address",
          "unit": "Wax",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1181
    },
    {
      "name": "strike",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1211
    },
    {
      "name": "underlying",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1241
    },
    {
      "name": "maturity",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1271
    },
    {
      "name": "premium",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1301
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5933
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5586
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1391
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1575
    },
    {
      "name": "writer_claim",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1605
    }
  ],
  "bytecode": "0x61165156600436101561000d5761161f565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263f83a898860005114156103845734156100ba57600080fd5b60643560205181106100cb57600080fd5b5060843560205181106100dd57600080fd5b5060a43560205181106100ef57600080fd5b5060c435602051811061010157600080fd5b5060e435602051811061011357600080fd5b5060003314156006541560005415161661012c57600080fd5b336000553260065560043560075560243560085560443560095560643560015560843560025560c43560035560e43560045560a4356005556003543b61017157600080fd5b600354301861017f57600080fd5b60206101e0604463095ea7b361014052600154610160526d314dc6448d9338c15b0a000000006101805261015c60006003545af16101bc57600080fd5b6000506101e0506004543b6101d057600080fd5b60045430186101de57600080fd5b60206102a0604463095ea7b361020052600254610220526d314dc6448d9338c15b0a000000006102405261021c60006004545af161021b57600080fd5b6000506102a05060106102c0527f446169204f617420446563656d626572000000000000000000000000000000006102e0526102c080600b60c052602060c020602082510161012060006002818352015b8261012051602002111561027f576102a1565b61012051602002850151610120518501555b815160010180835281141561026c575b5050505050506003610320527f444f5a00000000000000000000000000000000000000000000000000000000006103405261032080600c60c052602060c020602082510161012060006002818352015b8261012051602002111561030457610326565b61012051602002850151610120518501555b81516001018083528114156102f1575b505050505050670de0b6b3a7640000600d556000600e3260e05260c052604060c020556000601055326011556000610380523260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610380a3005b6318160ddd60005114156103ab57341561039d57600080fd5b60105460005260206000f350005b63dd62ed3e60005114156104125734156103c457600080fd5b60043560205181106103d557600080fd5b5060243560205181106103e757600080fd5b50600f60043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156104d457341561042b57600080fd5b600435602051811061043c57600080fd5b50600e3360e05260c052604060c02080546024358082101561045d57600080fd5b80820390509050815550600e60043560e05260c052604060c020805460243581818301101561048b57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd60005114156105e45734156104ed57600080fd5b60043560205181106104fe57600080fd5b50602435602051811061051057600080fd5b50600e60043560e05260c052604060c02080546044358082101561053357600080fd5b80820390509050815550600e60243560e05260c052604060c020805460443581818301101561056157600080fd5b80820190509050815550600f60043560e05260c052604060c0203360e05260c052604060c02080546044358082101561059957600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b3600051141561066e5734156105fd57600080fd5b600435602051811061060e57600080fd5b50602435600f3360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b60001561072f575b610180526101405261016052601154610140511461069357600080fd5b600061014051186106a357600080fd5b60108054610160518181830110156106ba57600080fd5b80820190509050815550600e6101405160e05260c052604060c0208054610160518181830110156106ea57600080fd5b80820190509050815550610160516101a0526101405160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6000156107db575b6101805261014052610160526000610140511861075357600080fd5b60108054610160518082101561076857600080fd5b80820390509050815550600e6101405160e05260c052604060c0208054610160518082101561079657600080fd5b80820390509050815550610160516101a0526000610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6342966c68600051141561081f5734156107f457600080fd5b636161eb1861014052336101605260043561018052610180516101605160065801610737565b600050005b6379cc679060005114156108af57341561083857600080fd5b600435602051811061084957600080fd5b50600f60043560e05260c052604060c0203360e05260c052604060c02080546024358082101561087857600080fd5b80820390509050815550636161eb18610140526004356101605260243561018052610180516101605160065801610737565b600050005b63ae4e7fdf600051141561091d5734156108c857600080fd5b6005543b6108d557600080fd5b60055430186108e357600080fd5b60206101c060246307757be1610140526009546101605261015c6005545afa61090b57600080fd5b6000506101c05160005260206000f350005b632f048afa6000511415610af4576004543b61093857600080fd5b600454301861094657600080fd5b602061020060646323b872dd610140523361016052600254610180526004356101a05261015c60006004545af161097c57600080fd5b600050610200506002543b61099057600080fd5b600254301861099e57600080fd5b60206102c06044635158d42a6102205230610240526004356102605261023c60006002545af16109cd57600080fd5b6000506102c0506101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156109fe576109dc565b6340c10f196103005233610320526004356008548080610a1d57600080fd5b820490509050600d548082028215828483041417610a3a57600080fd5b8090509050905061034052610340516103205160065801610676565b6102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610a8157610a5e565b6000506004356008548080610a9557600080fd5b820490509050600d548082028215828483041417610ab257600080fd5b809050905090506103a0523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206103a0a3600160005260206000f350005b63d79875eb6000511415610ba6573415610b0d57600080fd5b600e3360e05260c052604060c020805460043580821015610b2d57600080fd5b80820390509050815550600e3060e05260c052604060c0208054600435818183011015610b5957600080fd5b80820190509050815550602435600a556004356101405230337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63efef39a16000511415610d1a57600a5434101515610c9057600435600e3060e05260c052604060c020541015610bdc57600080fd5b600e3360e05260c052604060c0208054600435818183011015610bfe57600080fd5b80820190509050815550600e3060e05260c052604060c020805460043580821015610c2857600080fd5b808203905090508155506000600060006000346002543b610c4857600080fd5b6002543018610c5657600080fd5b60206101c0602463533286ec61014052306101605261015c6002545afa610c7c57600080fd5b6000506101c0516000f1610c8f57600080fd5b5b6004356101e05233307fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101e0a36001543b610ccd57600080fd5b6001543018610cdb57600080fd5b60206102a06044638de93222610200523061022052346102405261021c60006001545af1610d0857600080fd5b6000506102a05160005260206000f350005b63b07f0a41600051141561109957600435600d548082028215828483041417610d4257600080fd5b80905090509050600e3360e05260c052604060c020541015610d6357600080fd5b6003543b610d7057600080fd5b6003543018610d7e57600080fd5b602061020060646323b872dd61014052336101605230610180526007546004358082028215828483041417610db257600080fd5b809050905090506101a05261015c60006003545af1610dd057600080fd5b6000506102005060126002543b610de657600080fd5b6002543018610df457600080fd5b60206102a0602463533286ec61022052306102405261023c6002545afa610e1a57600080fd5b6000506102a05160e05260c052604060c02080546007546004358082028215828483041417610e4857600080fd5b80905090509050818183011015610e5e57600080fd5b808201905090508155506004543b610e7557600080fd5b6004543018610e8357600080fd5b602061038060646323b872dd6102c0526002546102e05233610300526008546004358082028215828483041417610eb957600080fd5b80905090509050610320526102dc60006004545af1610ed757600080fd5b600050610380506003543b610eeb57600080fd5b6003543018610ef957600080fd5b6020610580604463a9059cbb6104e0526002543b610f1657600080fd5b6002543018610f2457600080fd5b6020610420602463533286ec6103a052306103c0526103bc6002545afa610f4a57600080fd5b600050610420516105005260126002543b610f6457600080fd5b6002543018610f7257600080fd5b60206104c0602463533286ec61044052306104605261045c6002545afa610f9857600080fd5b6000506104c05160e05260c052604060c02054610520526104fc60006003545af1610fc257600080fd5b600050610580506101406105a0525b6105a0515160206105a051016105a0526105a06105a0511015610ff357610fd1565b636161eb186105c052336105e052600435600d54808202821582848304141761101b57600080fd5b8090509050905061060052610600516105e05160065801610737565b6105806105a0525b6105a0515260206105a051036105a0526101406105a0511015156110625761103f565b600050307ffbda77129cf75888cf6abaff7c88653061908824c579c49cfb9224fce0918dbc60006000a2600160005260206000f350005b630aebeb4e600051141561127b576002543b6110b457600080fd5b60025430186110c257600080fd5b60206101c0602463533286ec61014052306101605261015c6002545afa6110e857600080fd5b6000506101c05133146110fa57600080fd5b600435600d54808202821582848304141761111457600080fd5b80905090509050600e3360e05260c052604060c02054101561113557600080fd5b6004543b61114257600080fd5b600454301861115057600080fd5b60206102a060646323b872dd6101e052600254610200523361022052600854600435808202821582848304141761118657600080fd5b80905090509050610240526101fc60006004545af16111a457600080fd5b6000506102a0506101406102c0525b6102c0515160206102c051016102c0526102c06102c05110156111d5576111b3565b636161eb186102e0523361030052600435600d5480820282158284830414176111fd57600080fd5b8090509050905061032052610320516103005160065801610737565b6102a06102c0525b6102c0515260206102c051036102c0526101406102c05110151561124457611221565b600050307f5b19963bf6a9a00776cbf844c84e706258ed0ca06d00f699e9d99858942c750360006000a2600160005260206000f350005b63c45a015560005114156112a257341561129457600080fd5b60005460005260206000f350005b636fe2a8a960005114156112c95734156112bb57600080fd5b60015460005260206000f350005b63d8da813160005114156112f05734156112e257600080fd5b60025460005260206000f350005b6317d69bc8600051141561131757341561130957600080fd5b60035460005260206000f350005b637158da7c600051141561133e57341561133057600080fd5b60045460005260206000f350005b639c550e81600051141561136557341561135757600080fd5b60055460005260206000f350005b63ad8f5008600051141561138c57341561137e57600080fd5b60075460005260206000f350005b636f307dc360005114156113b35734156113a557600080fd5b60085460005260206000f350005b63204f83f960005114156113da5734156113cc57600080fd5b60095460005260206000f350005b63e0a73a9360005114156114015734156113f357600080fd5b600a5460005260206000f350005b6306fdde0360005114156114b557341561141a57600080fd5b600b8060c052602060c020610180602082540161012060006003818352015b8261012051602002111561144c5761146e565b61012051850154610120516020028501525b8151600101808352811415611439575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b4160005114156115695734156114ce57600080fd5b600c8060c052602060c020610180602082540161012060006002818352015b8261012051602002111561150057611522565b61012051850154610120516020028501525b81516001018083528114156114ed575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce567600051141561159057341561158257600080fd5b600d5460005260206000f350005b6370a0823160005114156115d75734156115a957600080fd5b60043560205181106115ba57600080fd5b50600e60043560e05260c052604060c0205460005260206000f350005b6328ffd69e600051141561161e5734156115f057600080fd5b600435602051811061160157600080fd5b50601260043560e05260c052604060c0205460005260206000f350005b5b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a25b61000461165103610004600039610004611651036000f3",
  "deployedBytecode": "0x600436101561000d5761161f565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263f83a898860005114156103845734156100ba57600080fd5b60643560205181106100cb57600080fd5b5060843560205181106100dd57600080fd5b5060a43560205181106100ef57600080fd5b5060c435602051811061010157600080fd5b5060e435602051811061011357600080fd5b5060003314156006541560005415161661012c57600080fd5b336000553260065560043560075560243560085560443560095560643560015560843560025560c43560035560e43560045560a4356005556003543b61017157600080fd5b600354301861017f57600080fd5b60206101e0604463095ea7b361014052600154610160526d314dc6448d9338c15b0a000000006101805261015c60006003545af16101bc57600080fd5b6000506101e0506004543b6101d057600080fd5b60045430186101de57600080fd5b60206102a0604463095ea7b361020052600254610220526d314dc6448d9338c15b0a000000006102405261021c60006004545af161021b57600080fd5b6000506102a05060106102c0527f446169204f617420446563656d626572000000000000000000000000000000006102e0526102c080600b60c052602060c020602082510161012060006002818352015b8261012051602002111561027f576102a1565b61012051602002850151610120518501555b815160010180835281141561026c575b5050505050506003610320527f444f5a00000000000000000000000000000000000000000000000000000000006103405261032080600c60c052602060c020602082510161012060006002818352015b8261012051602002111561030457610326565b61012051602002850151610120518501555b81516001018083528114156102f1575b505050505050670de0b6b3a7640000600d556000600e3260e05260c052604060c020556000601055326011556000610380523260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610380a3005b6318160ddd60005114156103ab57341561039d57600080fd5b60105460005260206000f350005b63dd62ed3e60005114156104125734156103c457600080fd5b60043560205181106103d557600080fd5b5060243560205181106103e757600080fd5b50600f60043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156104d457341561042b57600080fd5b600435602051811061043c57600080fd5b50600e3360e05260c052604060c02080546024358082101561045d57600080fd5b80820390509050815550600e60043560e05260c052604060c020805460243581818301101561048b57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd60005114156105e45734156104ed57600080fd5b60043560205181106104fe57600080fd5b50602435602051811061051057600080fd5b50600e60043560e05260c052604060c02080546044358082101561053357600080fd5b80820390509050815550600e60243560e05260c052604060c020805460443581818301101561056157600080fd5b80820190509050815550600f60043560e05260c052604060c0203360e05260c052604060c02080546044358082101561059957600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b3600051141561066e5734156105fd57600080fd5b600435602051811061060e57600080fd5b50602435600f3360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b60001561072f575b610180526101405261016052601154610140511461069357600080fd5b600061014051186106a357600080fd5b60108054610160518181830110156106ba57600080fd5b80820190509050815550600e6101405160e05260c052604060c0208054610160518181830110156106ea57600080fd5b80820190509050815550610160516101a0526101405160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6000156107db575b6101805261014052610160526000610140511861075357600080fd5b60108054610160518082101561076857600080fd5b80820390509050815550600e6101405160e05260c052604060c0208054610160518082101561079657600080fd5b80820390509050815550610160516101a0526000610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a361018051565b6342966c68600051141561081f5734156107f457600080fd5b636161eb1861014052336101605260043561018052610180516101605160065801610737565b600050005b6379cc679060005114156108af57341561083857600080fd5b600435602051811061084957600080fd5b50600f60043560e05260c052604060c0203360e05260c052604060c02080546024358082101561087857600080fd5b80820390509050815550636161eb18610140526004356101605260243561018052610180516101605160065801610737565b600050005b63ae4e7fdf600051141561091d5734156108c857600080fd5b6005543b6108d557600080fd5b60055430186108e357600080fd5b60206101c060246307757be1610140526009546101605261015c6005545afa61090b57600080fd5b6000506101c05160005260206000f350005b632f048afa6000511415610af4576004543b61093857600080fd5b600454301861094657600080fd5b602061020060646323b872dd610140523361016052600254610180526004356101a05261015c60006004545af161097c57600080fd5b600050610200506002543b61099057600080fd5b600254301861099e57600080fd5b60206102c06044635158d42a6102205230610240526004356102605261023c60006002545af16109cd57600080fd5b6000506102c0506101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156109fe576109dc565b6340c10f196103005233610320526004356008548080610a1d57600080fd5b820490509050600d548082028215828483041417610a3a57600080fd5b8090509050905061034052610340516103205160065801610676565b6102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610a8157610a5e565b6000506004356008548080610a9557600080fd5b820490509050600d548082028215828483041417610ab257600080fd5b809050905090506103a0523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206103a0a3600160005260206000f350005b63d79875eb6000511415610ba6573415610b0d57600080fd5b600e3360e05260c052604060c020805460043580821015610b2d57600080fd5b80820390509050815550600e3060e05260c052604060c0208054600435818183011015610b5957600080fd5b80820190509050815550602435600a556004356101405230337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63efef39a16000511415610d1a57600a5434101515610c9057600435600e3060e05260c052604060c020541015610bdc57600080fd5b600e3360e05260c052604060c0208054600435818183011015610bfe57600080fd5b80820190509050815550600e3060e05260c052604060c020805460043580821015610c2857600080fd5b808203905090508155506000600060006000346002543b610c4857600080fd5b6002543018610c5657600080fd5b60206101c0602463533286ec61014052306101605261015c6002545afa610c7c57600080fd5b6000506101c0516000f1610c8f57600080fd5b5b6004356101e05233307fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101e0a36001543b610ccd57600080fd5b6001543018610cdb57600080fd5b60206102a06044638de93222610200523061022052346102405261021c60006001545af1610d0857600080fd5b6000506102a05160005260206000f350005b63b07f0a41600051141561109957600435600d548082028215828483041417610d4257600080fd5b80905090509050600e3360e05260c052604060c020541015610d6357600080fd5b6003543b610d7057600080fd5b6003543018610d7e57600080fd5b602061020060646323b872dd61014052336101605230610180526007546004358082028215828483041417610db257600080fd5b809050905090506101a05261015c60006003545af1610dd057600080fd5b6000506102005060126002543b610de657600080fd5b6002543018610df457600080fd5b60206102a0602463533286ec61022052306102405261023c6002545afa610e1a57600080fd5b6000506102a05160e05260c052604060c02080546007546004358082028215828483041417610e4857600080fd5b80905090509050818183011015610e5e57600080fd5b808201905090508155506004543b610e7557600080fd5b6004543018610e8357600080fd5b602061038060646323b872dd6102c0526002546102e05233610300526008546004358082028215828483041417610eb957600080fd5b80905090509050610320526102dc60006004545af1610ed757600080fd5b600050610380506003543b610eeb57600080fd5b6003543018610ef957600080fd5b6020610580604463a9059cbb6104e0526002543b610f1657600080fd5b6002543018610f2457600080fd5b6020610420602463533286ec6103a052306103c0526103bc6002545afa610f4a57600080fd5b600050610420516105005260126002543b610f6457600080fd5b6002543018610f7257600080fd5b60206104c0602463533286ec61044052306104605261045c6002545afa610f9857600080fd5b6000506104c05160e05260c052604060c02054610520526104fc60006003545af1610fc257600080fd5b600050610580506101406105a0525b6105a0515160206105a051016105a0526105a06105a0511015610ff357610fd1565b636161eb186105c052336105e052600435600d54808202821582848304141761101b57600080fd5b8090509050905061060052610600516105e05160065801610737565b6105806105a0525b6105a0515260206105a051036105a0526101406105a0511015156110625761103f565b600050307ffbda77129cf75888cf6abaff7c88653061908824c579c49cfb9224fce0918dbc60006000a2600160005260206000f350005b630aebeb4e600051141561127b576002543b6110b457600080fd5b60025430186110c257600080fd5b60206101c0602463533286ec61014052306101605261015c6002545afa6110e857600080fd5b6000506101c05133146110fa57600080fd5b600435600d54808202821582848304141761111457600080fd5b80905090509050600e3360e05260c052604060c02054101561113557600080fd5b6004543b61114257600080fd5b600454301861115057600080fd5b60206102a060646323b872dd6101e052600254610200523361022052600854600435808202821582848304141761118657600080fd5b80905090509050610240526101fc60006004545af16111a457600080fd5b6000506102a0506101406102c0525b6102c0515160206102c051016102c0526102c06102c05110156111d5576111b3565b636161eb186102e0523361030052600435600d5480820282158284830414176111fd57600080fd5b8090509050905061032052610320516103005160065801610737565b6102a06102c0525b6102c0515260206102c051036102c0526101406102c05110151561124457611221565b600050307f5b19963bf6a9a00776cbf844c84e706258ed0ca06d00f699e9d99858942c750360006000a2600160005260206000f350005b63c45a015560005114156112a257341561129457600080fd5b60005460005260206000f350005b636fe2a8a960005114156112c95734156112bb57600080fd5b60015460005260206000f350005b63d8da813160005114156112f05734156112e257600080fd5b60025460005260206000f350005b6317d69bc8600051141561131757341561130957600080fd5b60035460005260206000f350005b637158da7c600051141561133e57341561133057600080fd5b60045460005260206000f350005b639c550e81600051141561136557341561135757600080fd5b60055460005260206000f350005b63ad8f5008600051141561138c57341561137e57600080fd5b60075460005260206000f350005b636f307dc360005114156113b35734156113a557600080fd5b60085460005260206000f350005b63204f83f960005114156113da5734156113cc57600080fd5b60095460005260206000f350005b63e0a73a9360005114156114015734156113f357600080fd5b600a5460005260206000f350005b6306fdde0360005114156114b557341561141a57600080fd5b600b8060c052602060c020610180602082540161012060006003818352015b8261012051602002111561144c5761146e565b61012051850154610120516020028501525b8151600101808352811415611439575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b4160005114156115695734156114ce57600080fd5b600c8060c052602060c020610180602082540161012060006002818352015b8261012051602002111561150057611522565b61012051850154610120516020028501525b81516001018083528114156114ed575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce567600051141561159057341561158257600080fd5b600d5460005260206000f350005b6370a0823160005114156115d75734156115a957600080fd5b60043560205181106115ba57600080fd5b50600e60043560e05260c052604060c0205460005260206000f350005b6328ffd69e600051141561161e5734156115f057600080fd5b600435602051811061160157600080fd5b50601260043560e05260c052604060c0205460005260206000f350005b5b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a2",
  "source": "# @title A Right to Call - Physically Settled ERC 20 Token\r\n# \r\n# @notice Implementation of a Tokenized American Call Option on the Ethereum Network\r\n# \r\n# @author Alexander Angel\r\n# \r\n# @dev Uses a factory to initialize and deploy option contracts\r\n#\r\n# @version 0.1.0b14\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\ncontract Factory():\r\n    def getOmn(user_addr: address) -> address:constant\r\n    def getUser(omn: address) -> address:constant\r\n\r\ncontract Slate():\r\n    def bought(_option: address) -> address:constant\r\n    def wrote(_option: address) -> address:constant\r\n    def premium(_option: address) -> uint256:constant\r\n    def write(_option: address, prm: uint256, underlying: uint256) -> bool:modifying\r\n    def purchase(_option: address, prm: wei_value) -> bool:modifying\r\n    def withdraw(val: uint256) -> bool:modifying\r\n\r\ncontract Stash():\r\n    def fund(addr: address) -> uint256:constant\r\n    def deposit(_writer: address, underlying: uint256) -> bool:modifying\r\n    def withdraw(val: uint256) -> bool:modifying\r\n    def write(_option: address, _underlying: uint256) -> bool:modifying\r\n    def wrote(_option: address) -> address:constant\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool:modifying\r\n    \r\ncontract StrikeAsset(): # Strike price denominated in strike asset\r\n    def totalSupply() -> uint256:constant\r\n    def balanceOf(_owner: address) -> uint256:constant\r\n    def allowance(_owner: address, _spender: address) -> uint256:constant\r\n    def transfer(_to: address, _value: uint256) -> bool:modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool:modifying\r\n    def approve(_spender: address, _value: uint256) -> bool:modifying\r\n\r\ncontract UnderlyingAsset():\r\n    def totalSupply() -> uint256:constant\r\n    def balanceOf(_owner: address) -> uint256:constant\r\n    def allowance(_owner: address, _spender: address) -> uint256:constant\r\n    def transfer(_to: address, _value: uint256) -> bool:modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool:modifying\r\n    def approve(_spender: address, _value: uint256) -> bool:modifying\r\n\r\ncontract Wax():\r\n    def timeToExpiry(time: timestamp) -> bool:constant\r\n\r\nExercise: event({eco: indexed(address)})\r\nClose: event({eco: indexed(address)})\r\nMature: event({eco: indexed(address)})\r\nPayment: event({amount: wei_value, source: indexed(address)})\r\n# EIP-20 Events\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\r\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\r\n\r\n# Interface Contracts\r\nfactory: public(Factory)\r\nslate: public(Slate)\r\nstash: public(Stash)\r\nstrikeAsset: public(StrikeAsset)\r\nunderlyingAsset: public(UnderlyingAsset)\r\nwax: public(Wax)\r\n# Probably can delete\r\nowner: address\r\n\r\n# Contract parameters\r\nstrike: public(uint256)\r\nunderlying: public(uint256)\r\nmaturity: public(timestamp)\r\npremium: public(uint256)\r\n\r\n# EIP-20\r\nname: public(string[64])\r\nsymbol: public(string[32])\r\ndecimals: public(uint256)\r\nbalanceOf: public(map(address, uint256))\r\nallowances: map(address, map(address, uint256))\r\ntotal_supply: uint256\r\nminter: address\r\n\r\n# User Claims\r\nwriter_claim: public(map(address, uint256))\r\n\r\n@public\r\n@payable\r\ndef __default__():\r\n    log.Payment(msg.value, msg.sender)\r\n\r\n@public\r\ndef setup(  _strike: uint256,\r\n            _underlying: uint256,\r\n            _maturity: timestamp,\r\n            _slate_address: address,\r\n            _stash_address: address,\r\n            _wax_address: address,\r\n            _strikeAsset_address: address,\r\n            _underlyingAsset_address: address,\r\n            ):\r\n    \"\"\"\r\n    @notice Setup is called from the factory contract using an ECO contract template address\r\n    \"\"\"\r\n    assert(self.factory == ZERO_ADDRESS and self.owner == ZERO_ADDRESS) and msg.sender != ZERO_ADDRESS\r\n    self.factory = Factory(msg.sender)\r\n    self.owner = tx.origin\r\n    \r\n    # Contract Parameters\r\n    self.strike = _strike # Strike denominated in Strike Asset -> 10 Dai\r\n    self.underlying = _underlying # Underlying denominated in Underlying Asset -> 2 Oat\r\n    self.maturity = _maturity # Timestamp of maturity date\r\n\r\n    # Interfaces\r\n    self.slate = Slate(_slate_address)\r\n    self.stash = Stash(_stash_address)\r\n    self.strikeAsset = StrikeAsset(_strikeAsset_address)\r\n    self.underlyingAsset = UnderlyingAsset(_underlyingAsset_address)\r\n    self.wax = Wax(_wax_address)\r\n    \r\n    # Approve Stash/Slate\r\n    self.strikeAsset.approve(self.slate, 1000000000000000*10**18)\r\n    self.underlyingAsset.approve(self.stash, 1000000000000000*10**18)\r\n\r\n    # EIP-20 Token\r\n    self.name = \"Dai Oat December\"\r\n    self.symbol = \"DOZ\"\r\n    self.decimals = 10**18\r\n    self.balanceOf[tx.origin] = 0\r\n    self.total_supply = 0\r\n    self.minter = tx.origin\r\n    log.Transfer(ZERO_ADDRESS, tx.origin, 0)\r\n\r\n# EIP-20 Functions - Source: https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC20.vy\r\n@public\r\n@constant\r\ndef totalSupply() -> uint256:\r\n    \"\"\"\r\n    @dev Total number of tokens in existence.\r\n    \"\"\"\r\n    return self.total_supply\r\n\r\n@public\r\n@constant\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    \"\"\"\r\n    @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    @param _owner The address which owns the funds.\r\n    @param _spender The address which will spend the funds.\r\n    @return An uint256 specifying the amount of tokens still available for the spender.\r\n    \"\"\"\r\n    return self.allowances[_owner][_spender]\r\n\r\n\r\n@public\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@public\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n          Note that while this function emits a Transfer event, this is not required as per the specification,\r\n          and other compliant implementations may not emit the event.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    # NOTE: vyper does not allow underflows\r\n    #      so the following subtraction would revert on insufficient allowance\r\n    self.allowances[_from][msg.sender] -= _value\r\n    log.Transfer(_from, _to, _value)\r\n    return True\r\n\r\n\r\n@public\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n         Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    \"\"\"\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log.Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@private\r\ndef mint(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Mint an amount of the token and assigns it to an account. \r\n         This encapsulates the modification of balances such that the\r\n         proper events are emitted.\r\n    @param _to The account that will receive the created tokens.\r\n    @param _value The amount that will be created.\r\n    \"\"\"\r\n    assert _to == self.minter\r\n    assert _to != ZERO_ADDRESS\r\n    self.total_supply += _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n\r\n@private\r\ndef _burn(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Internal function that burns an amount of the token of a given\r\n         account.\r\n    @param _to The account whose tokens will be burned.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    assert _to != ZERO_ADDRESS\r\n    self.total_supply -= _value\r\n    self.balanceOf[_to] -= _value\r\n    log.Transfer(_to, ZERO_ADDRESS, _value)\r\n\r\n\r\n@public\r\ndef burn(_value: uint256):\r\n    \"\"\"\r\n    @dev Burn an amount of the token of msg.sender.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    self._burn(msg.sender, _value)\r\n\r\n\r\n@public\r\ndef burnFrom(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @dev Burn an amount of the token from a given account.\r\n    @param _to The account whose tokens will be burned.\r\n    @param _value The amount that will be burned.\r\n    \"\"\"\r\n    self.allowances[_to][msg.sender] -= _value\r\n    self._burn(_to, _value)\r\n\r\n\r\n# Need to fix, constant function? Or modifying function? How do I liquidate mature contracts?\r\n@public\r\n@constant\r\ndef isMature() -> bool:\r\n    \"\"\"\r\n    @notice - Checks to see if this Omn contract has expired.\r\n    \"\"\"\r\n    return self.wax.timeToExpiry(self.maturity)\r\n\r\n@public\r\n@payable\r\ndef write(_underlying: uint256) -> bool:\r\n    \"\"\"\r\n    @notice - Writer mints Omn tokens which represent underlying asset deposits.\r\n    \"\"\"\r\n    self.underlyingAsset.transferFrom(msg.sender, self.stash, _underlying) # Store underlying in stash\r\n    self.stash.write(self, _underlying) # Record underlying amount in stash\r\n    self.mint(msg.sender, _underlying / self.underlying * self.decimals) # Mint amount of tokens equal to the underlying deposited / underlying asset amount\r\n    log.Transfer(ZERO_ADDRESS, msg.sender, _underlying / self.underlying * self.decimals)\r\n    return True\r\n\r\n# Temporary way to exchange tokens between parties\r\n@public\r\ndef sell(token_amount: uint256, ask_price: uint256) -> bool:\r\n    \"\"\"\r\n    @notice - Minted tokens can be sold by depositing them into the contract for buyers to purchase.\r\n    \"\"\"\r\n    self.balanceOf[msg.sender] -= token_amount\r\n    self.balanceOf[self] += token_amount\r\n    self.premium = ask_price\r\n    log.Transfer(msg.sender, self, token_amount)\r\n    return True\r\n\r\n# Temporary way to exchange tokens between parties\r\n@public\r\n@payable\r\ndef purchase(token_amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice - Buyer purchases Omn Tokens which can be exercised.\r\n    \"\"\"\r\n    if(msg.value >= self.premium): # If the amount sent is more than the premium, sell the amount of tokens it would purchase\r\n        assert self.balanceOf[self] >= token_amount\r\n        self.balanceOf[msg.sender] += token_amount\r\n        self.balanceOf[self] -= token_amount\r\n        send(self.stash.wrote(self), msg.value)\r\n    log.Transfer(self, msg.sender, token_amount)\r\n    return self.slate.purchase(self, msg.value)\r\n\r\n@public\r\n@payable\r\ndef exercise(amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice - Buyer sends strike asset in exchange for underlying asset. \r\n    \"\"\"\r\n    #assert msg.sender == self.slate.bought(self)\r\n    assert self.balanceOf[msg.sender] >= amount * self.decimals\r\n    self.strikeAsset.transferFrom(msg.sender, self, (self.strike * amount)) # Strike asset transferred from purchaser\r\n    self.writer_claim[self.stash.wrote(self)] += (self.strike * amount) # Writer's claim to withdraw strike asset updated\r\n    self.underlyingAsset.transferFrom(self.stash, msg.sender, self.underlying * amount) # Underlying asset sent to Purchaser\r\n    self.strikeAsset.transfer(self.stash.wrote(self), (self.writer_claim[self.stash.wrote(self)])) # Send strike asset to writer\r\n    self._burn(msg.sender, amount * self.decimals)\r\n    log.Exercise(self)\r\n    return True\r\n\r\n@public\r\n@payable\r\ndef close(amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice - Writer can burn Omn to have their underwritten assets returned. \r\n    \"\"\"\r\n    assert msg.sender == self.stash.wrote(self)\r\n    assert self.balanceOf[msg.sender] >= amount * self.decimals\r\n    self.underlyingAsset.transferFrom(self.stash, msg.sender, self.underlying * amount) # Underlying asset sent to Purchaser\r\n    self._burn(msg.sender, amount * self.decimals)\r\n    log.Close(self)\r\n    return True\r\n",
  "sourcePath": "C:/Users/alexa/OneDrive/Documents/Master/Blockchain/Projects/Emerald_Project/contracts/legacy/v2-pre-solo/OMN.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b14+commit.49b201c"
  },
  "networks": {
    "5777": {
      "events": {
        "0xb16bddadd75f5e575957a0d58a6ecc1caaad819513f887396c0fbdb544aba408": {
          "name": "Valid",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xb16bddadd75f5e575957a0d58a6ecc1caaad819513f887396c0fbdb544aba408"
        },
        "0x5c6c890314aa0d49059c35b35ff86ffb43efe8f543dc3691558f39dfa4a82011": {
          "name": "Buy",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x5c6c890314aa0d49059c35b35ff86ffb43efe8f543dc3691558f39dfa4a82011"
        },
        "0x3d9850d7c40f30357297906847346c1d76b7ab7b248eb505c9b940534a680e57": {
          "name": "Write",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x3d9850d7c40f30357297906847346c1d76b7ab7b248eb505c9b940534a680e57"
        },
        "0xfbda77129cf75888cf6abaff7c88653061908824c579c49cfb9224fce0918dbc": {
          "name": "Exercise",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xfbda77129cf75888cf6abaff7c88653061908824c579c49cfb9224fce0918dbc"
        },
        "0x2eb828fdc16ef5c267a7b18c3f8edf180aaff1a8921c4fe994fef55ddc8abe60": {
          "name": "Mature",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x2eb828fdc16ef5c267a7b18c3f8edf180aaff1a8921c4fe994fef55ddc8abe60"
        },
        "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e": {
          "name": "Payment",
          "inputs": [
            {
              "type": "uint256",
              "name": "amount",
              "indexed": false,
              "unit": "wei"
            },
            {
              "type": "address",
              "name": "source",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "name": "Transfer",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_to",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "name": "Approval",
          "inputs": [
            {
              "type": "address",
              "name": "_owner",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_spender",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        },
        "0x38e3aaf1b2f2c930b2c3ad9e7ba74f151a8852833d7f1f4c6a12793fff19c927": {
          "name": "Error",
          "inputs": [
            {
              "type": "uint256",
              "name": "fund",
              "indexed": false
            },
            {
              "type": "uint256",
              "name": "margn",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x38e3aaf1b2f2c930b2c3ad9e7ba74f151a8852833d7f1f4c6a12793fff19c927"
        },
        "0x5b19963bf6a9a00776cbf844c84e706258ed0ca06d00f699e9d99858942c7503": {
          "name": "Close",
          "inputs": [
            {
              "type": "address",
              "name": "eco",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x5b19963bf6a9a00776cbf844c84e706258ed0ca06d00f699e9d99858942c7503"
        }
      },
      "links": {},
      "address": "0x5D92AFd29A23eB853E5246174e466A59c0Fe96c3",
      "transactionHash": "0xfcb966fc31af9a24505f6e6c527d24b3e0f3b969d1b991d2027d8bf7b845665e"
    }
  },
  "schemaVersion": "3.0.19",
  "updatedAt": "2019-11-22T19:18:03.792Z"
}